Anotaçoes pós GO 

comandos uteis 

// gera um modulo chamado meu-modulo
$ go mod init meu-modulo

// cria o binario do go com o nome do modulo do projeto
// usa como referencia as variaveis de ambiente
// GOOS e GOARCH para gerar o binario para 
// o sistema que e arquitura que estao setados nessas variaveis
$ go build 

```sql
create table products (id varchar(255), name varchar(80), price decimal (10,2), primary key (id));
```

```go
  // config para set do DB
	cfg := mysql.NewConfig()
	cfg.User = "root"
	cfg.Passwd = "root"
	cfg.Net = "tcp"
	cfg.Addr = "127.0.0.1:3307"
	cfg.DBName = "goexpert"

	// Get a database handle.
	// var err error
	db, err := sql.Open("mysql", cfg.FormatDSN())
```

```sh
$ go mod init github.com/devfullcycle/6/6 && go mod tidy

```

drop table serial_numbers;
drop table products;
drop table categories;


aula 3 do packaging 
 comando 
 go mod edit --replace <module_name>=../<endereco_relativo_na_maquina>

==============================================================================================================================
======================================================= 1* Desafio ===========================================================

Olá dev, tudo bem?
 
Neste desafio vamos aplicar o que aprendemos sobre webserver http, contextos,
banco de dados e manipulação de arquivos com Go.
 
Você precisará nos entregar dois sistemas em Go:
- client.go
- server.go
 
Os requisitos para cumprir este desafio são:
 
O client.go deverá realizar uma requisição HTTP no server.go solicitando a cotação do dólar.
 
O server.go deverá consumir a API contendo o câmbio de Dólar e Real no endereço: https://economia.awesomeapi.com.br/json/last/USD-BRL e em seguida deverá retornar no formato JSON o resultado para o cliente.
 
Usando o package "context", o server.go deverá registrar no banco de dados SQLite cada cotação recebida, sendo que o timeout máximo para chamar a API de cotação do dólar deverá ser de 200ms e o timeout máximo para conseguir persistir os dados no banco deverá ser de 10ms.
 
O client.go precisará receber do server.go apenas o valor atual do câmbio (campo "bid" do JSON). Utilizando o package "context", o client.go terá um timeout máximo de 300ms para receber o resultado do server.go.
 
Os 3 contextos deverão retornar erro nos logs caso o tempo de execução seja insuficiente.
 
O client.go terá que salvar a cotação atual em um arquivo "cotacao.txt" no formato: Dólar: {valor}
 
O endpoint necessário gerado pelo server.go para este desafio será: /cotacao e a porta a ser utilizada pelo servidor HTTP será a 8080.
 
Ao finalizar, envie o link do repositório para correção.

======================================================= 1* Desafio ===========================================================
==============================================================================================================================


/testing 
	comando
	<!-- da um output da cobertura de teste -->
	$ go test -coverprofile=coverage.out

	<!-- da um output em html de qual treicho nao esta coberto com teste -->
	$ go tool cover -html=coverage.out
	
	<!-- executa testes em benchmark -->
	$ go test -bench=.

	<!-- executa testes de benchmark com paramentros -->
	$ go test -bench=. -run= -count=10 -benchtime=3s -benchmem
	-run= recebe um regex para identificar o teste que vai ser executado
	-count= quantidade de vezes que ele vai executar cada teste
	-benchtime= um tempo de execuçao para cada teste
	-benchmem exibe a memoria alocada em cada teste executado

// fuzzing
	testes de mutaçao
	go test -fuzz=. -fuzztime=5s
	-fuzztime=5s tempo de execuçao desse tipo de teste
